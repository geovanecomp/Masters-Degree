import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

from numpy import linalg as np_LA
from scipy import linalg as LA
from sklearn.decomposition import PCA

from utils import pulse_helper, file_helper

np.set_printoptions(suppress=True)

if __name__ == '__main__':
    TEN_BITS_ADC_VALUE = 1023
    pedestal = 0
    dimension = 7
    number_of_data = 200000
    qtd_for_training = 100000
    qtd_for_testing = number_of_data - qtd_for_training

    noise = pd.DataFrame(pedestal + np.random.randn(number_of_data, dimension))
    # Getting data from boundaries
    noise_training = noise[:qtd_for_training][:]
    noise_testing = noise[qtd_for_testing:][:]

    # noise_training = pd.DataFrame(np.matrix([
    #     [0.39555174461971243, 0.10733124334115654, 0.076694097330700858, -1.6495689917899095, -0.87017461708146371, -0.004087135238462305, 0.36861131781866791],
    #     [-0.51020210796509935, -1.1023617682770643, 0.33733879903826547, -0.130872270393526, -0.54073889334680625, -0.60913512590706953, 0.27756538960647414],
    #     [-1.1694821690852375, 0.43001596330629538, -0.14030705873648197, 1.5758754357892963, 0.14442273245922346, 1.6587802151652811, 0.28187848804360055],
    #     [-0.70541655166797623, 1.1215458386301822, 1.3558905807819441, 1.01086072100139, -0.54155007319001169, -1.3091228532628338, 0.49545210412740881],
    #     [-0.0075477405946199339, -2.875544102535486, 0.075890148125876383, -0.52332287328166238, 2.2392323863648134, -0.75547825674286362, 1.1109028040452806],
    #     [1.2357901507412368, 0.46911421874278858, -0.60315192885681101, -0.72680705660964184, 0.47957771271542238, -0.13994183233293631, 0.75881424670873099],
    #     [-1.2640180186666008, -0.32079757349469229, -0.41216195519983989, -0.89542255951052441, -1.1207376303661531, 0.045119573571340679, -0.4293394598435159],
    #     [0.37152147123316914, 1.0060223221192817, 0.10731049188874549, 0.17137943532183661, 0.074455534661730216, 0.050786734257040791, 0.3346921819585767],
    #     [1.1853503282893736, -0.18646208982689938, -0.092729725288070747, -0.76715114011240348, 0.24365985145639307, 1.1912690646908317, 1.3750231102254686],
    #     [-0.25292383778949024, -1.8265685733218726, -0.47420175294165351, -0.27791541259656094, 0.55344936400743483, 0.83368961136171471, 1.6006591597990316],
    #     [1.1911406919716645, -0.54954702252383425, -0.28317807669296913, -0.7495654608305975, -1.6406278324239896, -1.0613976925295383, 2.2170605292105936],
    #     [-0.69710261820130903, -0.67047583492618545, -0.39682170153336982, 0.64060174011879978, -1.2549591645950626, -1.5044026441639078, 0.98519867960472485],
    #     [-0.25389612733392003, 2.0624343668917136, 0.86193475387745477, 0.1594877114481848, -0.50071620017549157, 0.86536452852051349, -0.77826285216195579],
    #     [1.2822232074622286, 0.66135750759036993, 1.9230083033641345, 1.4326111480560653, 0.92393919608520225, 0.24267422170673381, -0.44989283667156993],
    #     [0.84547308689644507, 0.17892317158039064, -0.34059200663293238, 0.059915981381509435, -0.35586424133747091, 0.9786353213027994, 0.92178494465231398],
    #     [0.22897937644672547, -0.60313004828089656, 1.3657130904649111, 0.7499198572342064, 1.3173246301645136, 0.77691482822332936, 1.4513167607421706],
    #     [-0.33712801446578589, -0.0072825138547088029, 1.2642402861797453, 1.5943517027346963, 1.777161221727616, -0.12719061665427572, 0.52464382319465319],
    #     [-0.163250076602967, 0.24408845327728163, 0.1510934426405926, 1.0607889827678845, -0.35888130802992746, -0.32963590298032364, -0.96073907317412177],
    #     [-1.5133761727908011, -0.9933814797537569, 0.46844882194010246, 0.50686259418788748, -0.17578432731390395, 1.0883487070885309, 0.43641652392534841],
    #     [0.0937854057601957, -2.3386849506678895, -0.3881308491238793, 0.40138515878767617, 1.1263452909694092, 0.75202928432754368, 1.4722231206691641]
    # ]))

    # noise_testing = pd.DataFrame(np.matrix([
    #     [-1.8454926824065279, -1.5659779762805708, -0.51806719078688934, 1.9040530535368436, 0.30331276721362177, -0.54706223445194402, 1.1940114330056237],
    #     [-1.2021335512435498, -1.1335184545649164, 1.6232006454340755, 0.85009290604784871, -0.33313820519447152, -0.82799302068655856, 0.27576662315966594],
    #     [-0.83889331688610957, 1.340641358092588, -1.2375888576223402, 0.96860859753192774, 0.20100574238336119, -0.17317287162421752, -0.52082427955874222],
    #     [-0.094781495255078604, 3.6497990167538497, -0.92022916759103557, -1.1928168410766367, -0.48904709831949189, -1.0987407704430359, 0.90055435410106921],
    #     [0.26164758488173057, -0.17142865664466295, -0.20038133518130471, 1.0363874052234401, 0.16467521054531048, -0.10680160968576621, 0.017628731348854929],
    #     [0.1402173115566345, -0.037515981807951453, 0.49317437116012058, 1.1796234013707008, 0.084748475951180471, -0.50434130600218097, 0.1535161239743279],
    #     [-0.51839059167992496, -0.090505078611770595, -0.98482694993750053, -1.7449144888111181, -1.0727191490215151, -0.62723333727293118, -0.93164161609134966],
    #     [-0.11583925631601759, -1.0427490142254838, 0.11074342685128599, 1.2931193945268156, -0.34264538561015501, -0.76388267318471148, -1.4573591596438407],
    #     [-0.02377291168820091, 0.95778024118588412, -1.5054950449103739, -0.08725853084527381, -0.59226758122953105, -0.39195905365711753, -0.66177570590905455],
    #     [-1.0579201297087306, -0.90091684327409416, 1.11646196727228, 0.70408981453811958, 0.12693711264305294, -0.27002289421189085, 0.67115279788545157],
    #     [0.28648919599365369, -1.8064587157730638, -1.3823425414323427, -0.18513337173322827, 1.0794293392028294, -1.3210330417753609, 0.25773665944930174],
    #     [-0.36536436671707373, 0.41882911104637982, -0.0048473904251616169, 0.21714221585611657, -0.94414627399865703, -2.1979986699905343, -0.57069542667738293],
    #     [-1.6910304465582395, 0.52911105097304867, 0.12387045418523013, 1.2560564443953457, 0.16211517307767334, 0.96428442205509834, -0.52719518450811775],
    #     [-1.2226936696510273, 0.31574337783341622, -0.50516501243693501, -0.31872686047124316, 1.7717259552642177, -0.29194042525869635, -1.7640298383230069],
    #     [-1.2615308524243238, -1.05708588858513, 0.33169634561944644, -1.2788755032407411, 0.22564971920600668, 1.3239474903899289, 1.7664074878898708],
    #     [1.7184692049149421, 0.70185434672101088, -0.57475175911984511, 0.97284771222663813, 0.29480111849447044, -0.001900286084355006, -1.0800296193589345],
    #     [0.069274057096638184, -1.0011531247042695, 1.370776531199851, 0.53841364896777155, -2.3313799062579212, 1.1562704679111395, 0.88394841618214071],
    #     [1.0576359610999033, -0.38766074964788161, -0.094983270898753844, -0.46486731345537735, 0.6076710247525432, 0.87634468942714483, -0.45343962777049857],
    #     [0.62072103950806368, -0.42080270279645432, -0.93266337335421967, -0.002762695910885348, 1.1062581739831234, 0.65874313584021515, -0.27165876718772913],
    #     [0.79602096537095013, 0.031177231055718995, 1.6009125364492827, -1.9916827698558877, -0.8710211565729461, 0.39624432529706238, 1.3947735953211828]
    # ]))

    amplitude = np.zeros(qtd_for_testing)
    signal_testing = np.zeros((qtd_for_testing, dimension))

    for i in range(0, qtd_for_testing):
        amplitude[i] = TEN_BITS_ADC_VALUE * np.random.random(1)
        signal_testing[i, :] = pedestal + np.random.randn(1, dimension) + \
            np.multiply(amplitude[i], pulse_helper.get_jitter_pulse())

    # amplitude = pd.DataFrame([
    #     585.13142656858963, 255.67741851246021, 382.81444803336075, 525.72692898190382, 120.20537588129963, 636.15227223307909, 436.5108714293861, 278.30827478742378, 434.08989828304232, 362.74278264445769, 410.84826669163817, 338.177195732163, 355.75078373557363, 853.01778182087889, 904.04246598222574, 912.11864325999295, 180.73484427383372, 5.3482114166368833, 975.57641079967652, 16.74561856766837
    # ])

    # signal_testing = pd.DataFrame(np.matrix([
    #     [0.68966126815056139, 11.890467748079404, 263.49881526900037, 586.08966476395369, 330.36567772384007, 87.682192066805328, 25.888520179759691],
    #     [1.8959845482395845, 5.5881352359282825, 116.7160481043515, 257.0775179667661, 143.97661367337048, 37.205517002215402, 10.494831630913323],
    #     [1.6260988360629163, 6.3164707359086796, 172.8129903110291, 382.79612290275367, 216.73513607354218, 58.55965009673718, 16.476573697638003],
    #     [0.31297072813733845, 9.3003954965465052, 239.53092367803254, 524.65971737356415, 296.30687854943312, 79.193230300141821, 23.216991459268993],
    #     [0.35008662618910558, 2.199172044332288, 54.135730977826888, 118.85093635983256, 68.036672062716079, 15.946041167249142, 5.3209301280093788],
    #     [0.52188499032922842, 10.922473621864832, 287.47563799278419, 634.84202342572416, 357.72565503264167, 95.87489624483068, 26.948080405605054],
    #     [0.42779505649755029, 7.5355435764021532, 198.42405546084211, 435.78791797883167, 245.67166651448812, 63.976933916229143, 17.223119366975176],
    #     [-0.40290745686143092, 5.6080244166147351, 126.01822154683917, 279.09726609960984, 155.98007542860807, 41.401067887678586, 14.038284709862769],
    #     [0.26266406724509855, 7.1232954672952946, 195.51811514903773, 432.98613533166355, 244.6872975132425, 63.531781150012129, 19.059433656731667],
    #     [2.1469823681409741, 9.3555388656062206, 165.40693521195558, 364.88910606093219, 203.52129551278711, 53.929353675603494, 14.517325207946227],
    #     [2.2117538839384268, 7.5572584666882525, 185.57739697294508, 409.68400446944884, 233.399449742412, 59.324487739640077, 17.775691927365948],
    #     [0.50060793432090533, 5.4707962283500962, 153.36441642271112, 339.69325063831678, 189.74153352107152, 50.76970583039828, 16.542814268671158],
    #     [1.1411412427125818, 5.6428793175634242, 162.427179699047, 355.5995384538341, 199.65198208506362, 52.988122182214411, 14.037688805376426],
    #     [-0.64212252390641356, 15.726529395421942, 389.12993117581902, 852.64602089129767, 480.51408344349954, 128.88622985624897, 33.647307626327311],
    #     [-0.38402544064029526, 15.418421244686389, 409.47460648882617, 903.85420419026389, 510.31815857925938, 136.72302033641284, 39.90391619436199],
    #     [-0.61076676702640931, 15.749202177345381, 412.70565631565535, 912.03940797784344, 515.00356866671689, 136.22026642765843, 37.841940882048853],
    #     [0.3939922188782487, 2.8417121433000099, 81.737461796822615, 179.31830061300352, 103.48160821971909, 25.620337760123913, 7.5133690398554434],
    #     [0.3095126194587729, -0.097763806678635448, 1.7735715820618025, 5.9615659523341167, 2.2787102370922989, 0.92938037675457763, 1.3145176589554177],
    #     [-1.1745668532689988, 17.295757254427464, 443.27883732114572, 976.35234092843962, 551.04004529730742, 145.62610143571132, 40.204175794792732],
    #     [0.070536621762873453, -0.54249079541470757, 7.9141323599542783, 17.406437814372069, 10.349106470532453, 0.9591684673459262, 0.48367868346966059]
    # ]))

    amplitude = pd.DataFrame(amplitude)
    signal_testing = pd.DataFrame(signal_testing)

    # Branqueamento
    noise_train_cov = noise_training.cov()

    [D, V] = LA.eigh(noise_train_cov)

    # TODO Discover why I cant do it after np.diag for whitening filter.
    # If I do it, I am getting a diag matrix with other elements as inf.
    D = D**(-.5)

    # eig returns D as an array, we need to transform it into a diagonal matrix
    D = pd.DataFrame(np.diag(D))
    V = pd.DataFrame(V)

    W = pd.DataFrame(D.dot(V.transpose()))

    W_t = W.transpose()

    # PCA Part
    pure_signal = np.zeros((qtd_for_testing, dimension))
    for i in range(0, qtd_for_testing):
        jitter = pulse_helper.get_jitter_pulse()
        # print('============')
        # print(jitter)
        # print('============')
        pure_signal[i, :] = TEN_BITS_ADC_VALUE * np.random.randn(1) * jitter

    # pure_signal = pd.DataFrame(np.matrix([
    #     [0.017499005382249525, 13.083544544999272, 343.63443967759923, 759.50544193791347, 427.83473198172021, 113.4207451717983, 32.17249861940163],
    #     [0.0044809092434715328, 3.350257595127518, 87.993271816947811, 194.48390813678529, 109.55414684080812, 29.043254421606829, 8.2382994518925976],
    #     [0.011380776546843455, 8.5091062980270866, 223.48851756669214, 493.95731540119164, 278.24961346669903, 73.765115695436947, 20.923933088931399],
    #     [0.014990309687416055, 11.207858975664234, 294.37025462339221, 650.62108018298852, 366.49940881463874, 97.160499009126582, 27.56017883233536],
    #     [0.013854697385340509, 10.358791624949207, 272.06981590756885, 601.33235179429289, 338.73472309218772, 89.799966755200728, 25.472318155535891],
    #     [0.021811281571705306, 16.307719655678138, 428.31620185374163, 946.67020710526504, 533.26595435384559, 141.37099537806475, 40.100760638937608],
    #     [0.016760590319209734, 12.531451088317473, 329.13391002495001, 727.45617704903361, 409.78115672496, 108.63466819961744, 30.814898168561655],
    #     [0.016115389689274402, 12.049051603442559, 316.46386666509358, 699.45267748586809, 394.00658939653192, 104.45276559235211, 29.628675527765878],
    #     [0.021054264894744927, 15.741718263143836, 413.450385429812, 913.8135805010819, 514.75758659132293, 136.46435104412907, 38.708960507309733],
    #     [0.012299785100951127, 9.1962247423187709, 241.53542838540938, 533.84483945100374, 300.71853497662659, 79.721719099415637, 22.613560630176629],
    #     [0.0036391261605535396, 2.7208785977499779, 71.462866133317974, 157.94818405180294, 88.973317713668962, 23.587192065375991, 6.6906534867975624],
    #     [0.0028501802649106367, 2.1310045709833587, 55.970043834960627, 123.70574066452416, 69.684309656511104, 18.473596782136713, 5.2401504334011104],
    #     [0.0088259671279700483, 6.598942714117328, 173.31878026104204, 383.07148992925556, 215.78685177757916, 57.205980948585378, 16.226831699105279],
    #     [0.010203096846898437, 7.6285862640369455, 200.36198580273276, 442.84274509107797, 249.45641820901986, 66.131921338176127, 18.758730113509046],
    #     [0.009462594882794613, 7.0749324865005701, 185.82047490217053, 410.70290289907177, 231.35182012336742, 61.332318004432878, 17.397292826224103],
    #     [0.015918045571660256, 11.901502614394454, 312.58854725129447, 690.88739460330976, 389.18170559180663, 103.17366907308526, 29.265851857917283],
    #     [0.0036654254866896998, 2.7405419098919896, 71.979315725925403, 159.089647859796, 89.616312266958104, 23.757652563142635, 6.739005665411387],
    #     [0.0082573708799603476, 6.1738183041036852, 162.1530454767213, 358.39283333161228, 201.88519176553052, 53.520593765576315, 15.18144874136043],
    #     [0.010432559909719448, 7.8001497408329463, 204.86803682087739, 452.80207941490659, 255.06658094897278, 67.619198529425077, 19.18060552359956],
    #     [0.0050002815908568362, 3.7385785936083424, 98.192378662118983, 217.02611071427242, 122.25232734812465, 32.409594243515869, 9.1931826446344367]
    # ]))
    pure_signal = pd.DataFrame(pure_signal)

    n_pca_components = dimension
    pca = PCA(n_components=n_pca_components)
    coeff = pd.DataFrame(pca.fit(pure_signal.dot(W_t)).components_)
    coeff_t = coeff.transpose()
    Y = pca.explained_variance_.T

    # stochastic filter params
    # ddof=1 to use Sampled data variance -> N-1
    variance = noise_training[:][3].var()
    reference_pulse = pd.DataFrame([0.0000, 0.0172, 0.4524, 1.0000, 0.5633, 0.1493, 0.0424])
    bleached_reference_pulse = reference_pulse.T.dot(W_t)

    optimal_reference_pulse = bleached_reference_pulse.dot(coeff_t[:][:n_pca_components])

    optimal_noise = ((noise_testing - pedestal).dot(W_t)).dot(coeff_t[:][:n_pca_components])
    optimal_signal = ((signal_testing - pedestal).dot(W_t)).dot(coeff_t[:][:n_pca_components])

    No = variance * 2
    h1 = np.zeros((dimension, dimension))
    h2 = np.zeros((dimension, dimension))

    for i in range(0, n_pca_components):
        h1 = h1 + (Y[i] / (Y[i] + variance)) * (coeff_t[:][i].values.reshape(1, dimension) * coeff_t[:][i].values.reshape(dimension, 1))
        h2 = h2 + (1.0 / (Y[i] + variance)) * (coeff_t[:][i].values.reshape(1, dimension) * coeff_t[:][i].values.reshape(dimension, 1))

    IR_noise = np.zeros((len(noise_testing), 1))
    IR_signal = np.zeros((len(signal_testing), 1))

    for ev in range(0, len(noise_testing)):
        IR_noise[ev] = (1.0 / No) * ((
                    (optimal_noise.values[ev][:].dot((coeff[:][:n_pca_components])))
                    .dot(h1).dot(
                        (optimal_noise.values[ev][:].dot(coeff[:][:n_pca_components]))
                    ).transpose()
                ).transpose())

    for ev in range(0, len(signal_testing)):
        IR_signal[ev] = (1.0 / No) * ((
                    (optimal_signal.values[ev][:].dot((coeff[:][:n_pca_components])))
                    .dot(h1).dot(
                        (optimal_signal.values[ev][:].dot(coeff[:][:n_pca_components]))
                    ).transpose()
                ).transpose())

    ID_noise = np.zeros((len(noise_testing), 1))
    ID_signal = np.zeros((len(signal_testing), 1))
    for ev in range(0, len(noise_testing)):
        ID_noise[ev] = ((optimal_reference_pulse.dot(coeff[:][:n_pca_components]))
                        .dot(h2).dot(
                            (optimal_noise.values[ev][:].dot(coeff[:][:n_pca_components]))
                            .transpose()
                            )
                        )

    for ev in range(0, len(signal_testing)):
        ID_signal[ev] = ((optimal_reference_pulse.dot(coeff[:][:n_pca_components]))
                         .dot(h2).dot(
                            (optimal_signal.values[ev][:].dot(coeff[:][:n_pca_components]))
                            .transpose()
                            )
                         )
    # Matched Filter estimatives
    estimated_noise = ID_noise + IR_noise
    estimated_signal = ID_signal + IR_signal
    print('Almost...\n')

    # Amplitude estimative
    b1 = coeff[:][:n_pca_components].transpose().dot(coeff_t[:][:n_pca_components])
    # DAQUI PARA BAIXO B2 E B3 NAO BATEM DEVIDO A ALGUMAS LINHAS DE COEFF
    b2 = (1.0 / No) * (
        coeff_t[:][:n_pca_components].transpose().dot(h1)
        .dot(coeff[:][:n_pca_components])
    )
    b3 = (optimal_reference_pulse.dot(coeff[:][:n_pca_components])).dot(h2).dot(coeff[:][:n_pca_components])

    amp_noise = np.zeros((len(noise_testing), 1))
    amp_signal = np.zeros((len(signal_testing), 1))

    a = (1.0 / No) * (
                (optimal_reference_pulse.dot(coeff[:][:n_pca_components])).dot(h1)
                .dot((optimal_reference_pulse.dot(coeff[:][:n_pca_components])).transpose())
            )
    b = (optimal_reference_pulse.dot(coeff[:][:n_pca_components])).dot(h2).dot((optimal_reference_pulse.dot(coeff[:][:n_pca_components])).transpose())

    cs = 0
    cr = 0
    for i in range(0, len(signal_testing)):
        ra = b * b + 4 * a * estimated_signal[i]
        if ra.values < 0:
            ra = 0
            cs = cs + 1
        # signal amplitute using MF filter output
        amp_signal[i] = (-b + np.sqrt(ra)) / (2 * a)

    for i in range(0, len(noise_testing)):
        ra = b * b + 4 * a * estimated_noise[i]
        if ra.values < 0:
            ra = 0
            cr = cr + 1
        amp_noise[i] = (-b + np.sqrt(ra)) / (2 * a)

    amp_signal = pd.DataFrame(amp_signal)
    amp_error = amp_signal.values - amplitude.values
    # print('================ Analysis ================')
    # print('***************** noise_training')
    # print(noise_training.mean())
    # print('***************** noise_testing')
    # print(noise_testing.mean())
    # print('***************** amplitude')
    # print(amplitude.mean())
    # print('***************** signal_testing')
    # print(signal_testing.mean())
    # print('***************** noise_train_cov')
    # print(noise_train_cov.mean())
    # print('***************** W')
    # print(W.mean())
    # print('***************** pure_signal')
    # print(pure_signal.mean())
    # print('***************** coeff')
    # print(coeff.mean())
    # print('***************** b1')
    # print(b1.mean())
    # print('***************** b2')
    # print(b2.mean())
    # print('***************** b3')
    # print(b3.mean())
    # print('***************** amp_error')
    # print(amp_error.mean())
    # print('================ Analysis ================')

    # file_helper.save_file('noise', 'matched_filter', noise)
    # file_helper.save_file('W', 'matched_filter', W)
    # file_helper.save_file('coeff_t', 'matched_filter', coeff_t)
    # file_helper.save_file('estimated_noise', 'matched_filter', estimated_noise)
    # file_helper.save_file('estimated_signal', 'matched_filter', estimated_signal)
    # file_helper.save_file('b1', 'matched_filter', b1)
    # file_helper.save_file('b2', 'matched_filter', b2)
    # file_helper.save_file('b3', 'matched_filter', b3)
    # file_helper.save_file('h1', 'matched_filter', h1)
    # file_helper.save_file('h2', 'matched_filter', h2)
    file_helper.save_file('amplitude', 'matched_filter', amplitude)
    file_helper.save_file('amp_signal', 'matched_filter', amp_signal)
    file_helper.save_file('amp_noise', 'matched_filter', amp_noise)
    file_helper.save_file('amp_error', 'matched_filter', amp_error)

    # print('==================== amplitude')
    # print(amplitude)
    # print('====================')
    # print('==================== amp_signal')
    # print(amp_signal)
    # print('====================')
    # print('==================== amp_noise')
    # print(amp_noise)
    # print('====================')

    print('Finished!')
